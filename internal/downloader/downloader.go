package downloader

import (
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"fmt"
	"main/internal/api"
	"main/internal/core"
	"main/internal/logger"
	"main/internal/metadata"
	"main/internal/parser"
	"main/internal/progress"
	"main/internal/ui"
	"main/internal/utils"
	"main/utils/lyrics"
	"main/utils/runv14"
	"main/utils/runv3"
	"main/utils/structs"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"
	"sync"
	"time"

	"github.com/fatih/color"
)

// cleanupEmptyAlbumFolders 清理只包含 cover.jpg 的空文件夹
// 这些文件夹是由于音质标签不一致而产生的冗余文件夹
func cleanupEmptyAlbumFolders(baseSaveFolder string) int {
	cleanedCount := 0
	filepath.Walk(baseSaveFolder, func(path string, info os.FileInfo, err error) error {
		if err != nil || !info.IsDir() || path == baseSaveFolder {
			return nil
		}

		files, err := os.ReadDir(path)
		if err != nil {
			return nil
		}

		// 检查是否只包含 cover.jpg 或 folder.jpg
		if len(files) == 0 {
			// 空文件夹，删除
			os.RemoveAll(path)
			cleanedCount++
		} else if len(files) == 1 {
			fileName := files[0].Name()
			if fileName == "cover.jpg" || fileName == "folder.jpg" {
				// 只有封面图片，删除整个文件夹
				os.RemoveAll(path)
				cleanedCount++
			}
		} else if len(files) == 2 {
			// 检查是否只有 cover.jpg 和 folder.jpg
			hasCover := false
			hasFolder := false
			for _, f := range files {
				if f.Name() == "cover.jpg" {
					hasCover = true
				} else if f.Name() == "folder.jpg" {
					hasFolder = true
				} else {
					// 有其他文件，不是空文件夹
					return nil
				}
			}
			if hasCover && hasFolder {
				// 只有两个封面图片，删除
				os.RemoveAll(path)
				cleanedCount++
			}
		}
		return nil
	})
	return cleanedCount
}

// GetCacheBasePath 根据是否启用缓存返回基础路径
// 返回值: (实际使用的路径, 最终目标路径, 是否使用缓存)
func GetCacheBasePath(targetPath, albumId string) (string, string, bool) {
	if !core.Config.EnableCache {
		return targetPath, targetPath, false
	}

	// 创建唯一的缓存子目录（使用albumId的hash避免冲突）
	hash := sha256.Sum256([]byte(albumId + targetPath))
	cacheSubDir := hex.EncodeToString(hash[:])[:16]
	cachePath := filepath.Join(core.Config.CacheFolder, cacheSubDir)

	// 确保缓存目录存在
	if err := os.MkdirAll(cachePath, 0755); err != nil {
		// 如果创建缓存目录失败，返回直接保存模式
		return "", targetPath, false
	}

	return cachePath, targetPath, true
}

// SafeMoveFile 导出utils包中的SafeMoveFile函数，方便外部调用
func SafeMoveFile(src, dst string) error {
	return utils.SafeMoveFile(src, dst)
}

func checkAndReEncodeTrack(trackPath string, statusIndex int, notifier *progress.ProgressNotifier) (bool, error) {
	if notifier != nil {
		notifier.NotifyStatus(statusIndex, "正在检测...", "check")
	}
	checkArgs := strings.Fields(core.Config.FfmpegCheckArgs)
	cmdCheckArgs := append([]string{"-i", trackPath}, checkArgs...)
	checkCmd := exec.Command("ffmpeg", cmdCheckArgs...)

	var stderr bytes.Buffer
	checkCmd.Stderr = &stderr
	err := checkCmd.Run()

	if err == nil && stderr.Len() == 0 {
		return false, nil
	}

	if notifier != nil {
		notifier.NotifyStatus(statusIndex, "文件损坏, 正在重新编码...", "reencode")
	}

	tempTrackPath := trackPath + ".fixed.m4a"
	defer os.Remove(tempTrackPath)

	encodeArgs := strings.Fields(core.Config.FfmpegEncodeArgs)
	cmdEncodeArgs := append([]string{"-i", trackPath}, encodeArgs...)
	cmdEncodeArgs = append(cmdEncodeArgs, tempTrackPath)

	encodeCmd := exec.Command("ffmpeg", cmdEncodeArgs...)
	var encodeStderr bytes.Buffer
	encodeCmd.Stderr = &encodeStderr
	err = encodeCmd.Run()

	if err != nil {
		return true, fmt.Errorf("重新编码失败: %v, FFMPEG输出: %s", err, encodeStderr.String())
	}

	if err := os.Remove(trackPath); err != nil {
		return true, fmt.Errorf("删除损坏的原文件失败: %w", err)
	}
	if err := os.Rename(tempTrackPath, trackPath); err != nil {
		return true, fmt.Errorf("替换为修复文件失败: %w", err)
	}

	return true, nil
}

func downloadTrackWithFallback(track structs.TrackData, meta *structs.AutoGenerated, albumId, storefront, baseSaveFolder, finalSaveFolder, Codec, covPath string, workingAccounts []structs.Account, initialAccountIndex int, statusIndex int, updateStatus func(index int, status string, sColor func(a ...interface{}) string), progressChan chan runv14.ProgressUpdate) (string, error) {
	maxRetries := 3 // 每个账号最多重试次数
	var lastError error
	yellow := color.New(color.FgYellow).SprintFunc()
	red := color.New(color.FgRed).SprintFunc()

	// 连接失败计数器（用于判断是否跳过）
	connectionRefusedCount := 0
	const maxConnectionRefusedRetries = 3

	for i := 0; i < len(workingAccounts); i++ {
		accountIndex := (initialAccountIndex + i) % len(workingAccounts)
		account := &workingAccounts[accountIndex]

		for attempt := 0; attempt <= maxRetries; attempt++ {
			trackPath, err := downloadTrackSilently(track, meta, albumId, storefront, baseSaveFolder, finalSaveFolder, Codec, covPath, account, progressChan)
			if err == nil {
				return trackPath, nil
			}
			lastError = err

			// 检测连接被拒绝错误
			if strings.Contains(err.Error(), "connection refused") {
				connectionRefusedCount++
				// 原地刷新显示重试信息
				updateStatus(statusIndex, fmt.Sprintf("连接失败 %d/%d: 正在重试...", connectionRefusedCount, maxConnectionRefusedRetries), yellow)

				// 超过最大重试次数，直接跳过
				if connectionRefusedCount >= maxConnectionRefusedRetries {
					updateStatus(statusIndex, "连接服务失败，已跳过", red)
					return "", fmt.Errorf("连接服务持续失败，已跳过此曲目")
				}
			} else {
				// 非连接错误，显示简短提示
				errorMsg := err.Error()
				if len(errorMsg) > 40 {
					errorMsg = errorMsg[:37] + "..."
				}
				updateStatus(statusIndex, fmt.Sprintf("重试 %d/%d: %s", attempt+1, maxRetries+1, errorMsg), yellow)
			}

			if attempt < maxRetries {
				time.Sleep(1500 * time.Millisecond)
			}
		}

		// 单个账户失败，尝试下一个（原地刷新）
		if i < len(workingAccounts)-1 {
			updateStatus(statusIndex, fmt.Sprintf("账户 %s 失败，切换中...", account.Name), yellow)
			time.Sleep(500 * time.Millisecond)
		}
	}

	// 截断最终错误信息，避免过长
	errorMsg := lastError.Error()
	if len(errorMsg) > 50 {
		errorMsg = errorMsg[:47] + "..."
	}
	return "", fmt.Errorf("所有账户失败: %s", errorMsg)
}

func downloadTrackSilently(track structs.TrackData, meta *structs.AutoGenerated, albumId, storefront, baseSaveFolder, finalSaveFolder, Codec, covPath string, account *structs.Account, progressChan chan runv14.ProgressUpdate) (string, error) {
	if track.Type == "music-videos" {
		// 专辑中的MV：下载到专辑目录，使用简化命名（和歌曲一样的命名规则）
		if !core.Config.DownloadVideos {
			core.OkDict[albumId] = append(core.OkDict[albumId], -1)
			return "", nil
		}

		if len(account.MediaUserToken) <= 50 {
			return "", errors.New("media-user-token is not set, skip MV dl")
		}
		if _, err := exec.LookPath("mp4decrypt"); err != nil {
			return "", errors.New("mp4decrypt is not found, skip MV dl")
		}

		// 计算MV在专辑中的位置
		trackNum := -1
		for i, t := range meta.Data[0].Relationships.Tracks.Data {
			if t.ID == track.ID {
				trackNum = i + 1
				break
			}
		}
		if trackNum == -1 {
			return "", errors.New("track not found in metadata")
		}

		// 使用和歌曲相同的文件夹结构
		var singerFoldername, albumFoldername string
		if core.Config.ArtistFolderFormat != "" {
			if strings.Contains(albumId, "pl.") {
				singerFoldername = strings.NewReplacer(
					"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
				).Replace(core.Config.ArtistFolderFormat)
			} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
				singerFoldername = strings.NewReplacer(
					"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
				).Replace(core.Config.ArtistFolderFormat)
			} else {
				singerFoldername = strings.NewReplacer(
					"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{ArtistId}", "",
				).Replace(core.Config.ArtistFolderFormat)
			}
		}

		// MV使用Video标签
		Quality := "Video"
		MVCodec := "H.264"
		Tag_string := ""

		if strings.Contains(albumId, "pl.") {
			albumFoldername = strings.NewReplacer(
				"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
				"{PlaylistId}", albumId, "{Quality}", Quality, "{Codec}", MVCodec, "{Tag}", Tag_string,
			).Replace(core.Config.PlaylistFolderFormat)
		} else {
			albumFoldername = strings.NewReplacer(
				"{ReleaseDate}", meta.Data[0].Attributes.ReleaseDate, "{ReleaseYear}", meta.Data[0].Attributes.ReleaseDate[:4],
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName), "{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
				"{UPC}", meta.Data[0].Attributes.Upc, "{RecordLabel}", meta.Data[0].Attributes.RecordLabel,
				"{Copyright}", meta.Data[0].Attributes.Copyright, "{AlbumId}", albumId,
				"{Quality}", Quality, "{Codec}", MVCodec, "{Tag}", Tag_string,
			).Replace(core.Config.AlbumFolderFormat)
		}

		// MV文件名使用和歌曲相同的命名规则，但后缀为.mp4
		mvFileName := strings.NewReplacer(
			"{SongId}", track.ID,
			"{SongNumer}", fmt.Sprintf("%02d", trackNum),
			"{SongName}", core.LimitString(track.Attributes.Name),
			"{DiscNumber}", fmt.Sprintf("%0d", track.Attributes.DiscNumber),
			"{TrackNumber}", fmt.Sprintf("%0d", track.Attributes.TrackNumber),
			"{Quality}", Quality,
			"{Tag}", Tag_string,
			"{Codec}", MVCodec,
		).Replace(core.Config.SongFileFormat)

		sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
		sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")
		sanitizedMvName := core.ForbiddenNames.ReplaceAllString(mvFileName, "_")
		filenameWithExt := fmt.Sprintf("%s.mp4", sanitizedMvName)

		finalArtistDir, finalAlbumDir, finalFilename := utils.EnsureSafePath(baseSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, filenameWithExt)
		var finalSingerFolder string
		if finalArtistDir != "" {
			finalSingerFolder = filepath.Join(baseSaveFolder, finalArtistDir)
		} else {
			finalSingerFolder = baseSaveFolder
		}
		finalAlbumFolder := filepath.Join(finalSingerFolder, finalAlbumDir)
		if err := os.MkdirAll(finalAlbumFolder, 0755); err != nil {
			return "", fmt.Errorf("创建专辑目录失败: %w", err)
		}
		mvPath := filepath.Join(finalAlbumFolder, finalFilename)

		// 检查文件是否存在
		checkPath := mvPath
		returnPath := mvPath
		if finalSaveFolder != baseSaveFolder {
			// 使用缓存时，检查最终目标路径是否已存在文件
			var targetSingerFolder string
			if finalArtistDir != "" {
				targetSingerFolder = filepath.Join(finalSaveFolder, finalArtistDir)
			} else {
				targetSingerFolder = finalSaveFolder
			}
			targetAlbumFolder := filepath.Join(targetSingerFolder, finalAlbumDir)
			checkPath = filepath.Join(targetAlbumFolder, finalFilename)
			returnPath = checkPath
		}

		// 强制下载模式跳过文件存在性检查
		if !core.ForceDownload {
			exists, err := utils.FileExists(checkPath)
			if err != nil {
				return "", errors.New("failed to check if MV exists")
			}
			if exists {
				core.SharedLock.Lock()
				core.OkDict[albumId] = append(core.OkDict[albumId], trackNum)
				core.SharedLock.Unlock()
				return returnPath, nil
			}
		}

		// 下载MV
		mvm3u8url, _, err := runv3.GetWebplayback(track.ID, core.DeveloperToken, account.MediaUserToken, true)
		if err != nil {
			return "", fmt.Errorf("获取MV播放列表失败: %w", err)
		}
		if mvm3u8url == "" {
			return "", errors.New("media-user-token may be wrong or expired")
		}

		vidPath := filepath.Join(finalAlbumFolder, fmt.Sprintf("%s_vid.mp4", track.ID))
		audPath := filepath.Join(finalAlbumFolder, fmt.Sprintf("%s_aud.mp4", track.ID))

		videom3u8url, _, err := parser.ExtractVideo(mvm3u8url)
		if err != nil {
			return "", fmt.Errorf("提取视频流URL失败: %w", err)
		}

		videokeyAndUrls, err := runv3.Run(track.ID, videom3u8url, core.DeveloperToken, account.MediaUserToken, true)
		if err != nil {
			return "", fmt.Errorf("获取视频密钥和URL失败: %w", err)
		}
		err = runv3.ExtMvData(videokeyAndUrls, vidPath)
		if err != nil {
			return "", fmt.Errorf("下载或解密视频数据失败: %w", err)
		}

		audiom3u8url, err := parser.ExtractMvAudio(mvm3u8url)
		if err != nil {
			return "", fmt.Errorf("提取音频流URL失败: %w", err)
		}
		audiokeyAndUrls, err := runv3.Run(track.ID, audiom3u8url, core.DeveloperToken, account.MediaUserToken, true)
		if err != nil {
			return "", fmt.Errorf("获取音频密钥和URL失败: %w", err)
		}
		err = runv3.ExtMvData(audiokeyAndUrls, audPath)
		if err != nil {
			return "", fmt.Errorf("下载或解密音频数据失败: %w", err)
		}

		// 合并视频和音频
		muxCmd := exec.Command("MP4Box", "-quiet", "-add", vidPath, "-add", audPath, "-keep-utc", "-new", mvPath)
		if err := muxCmd.Run(); err != nil {
			return "", fmt.Errorf("合并视频音频失败: %w", err)
		}

		// 清理临时文件
		os.Remove(vidPath)
		os.Remove(audPath)

		core.SharedLock.Lock()
		core.OkDict[albumId] = append(core.OkDict[albumId], trackNum)
		core.SharedLock.Unlock()

		return mvPath, nil
	}

	manifest, err := api.GetInfoFromAdam(track.ID, account, storefront)
	if err != nil {
		return "", fmt.Errorf("failed to get manifest with account %s: %w", account.Name, err)
	}

	if manifest.Attributes.ExtendedAssetUrls.EnhancedHls == "" {
		if core.Dl_atmos {
			return "", errors.New("atmos unavailable")
		}
		// For AAC modes that need specific stream selection, we need to check M3U8
		if core.Dl_aac && (*core.Aac_type == "aac-binaural" || *core.Aac_type == "aac-downmix") {
			// These AAC types require stream selection, need to check M3U8
		} else if core.Dl_aac && *core.Aac_type == "aac-lc" {
			// AAC-LC also needs token for decryption
		}
	}
	needCheck := false

	if core.Config.GetM3u8Mode == "all" {
		needCheck = true
	} else if core.Config.GetM3u8Mode == "hires" && utils.Contains(track.Attributes.AudioTraits, "hi-res-lossless") {
		needCheck = true
	}
	var EnhancedHls_m3u8 string
	if needCheck && !core.Dl_aac {
		EnhancedHls_m3u8, _ = parser.CheckM3u8(track.ID, "song", account)
		if strings.HasSuffix(EnhancedHls_m3u8, ".m3u8") {
			manifest.Attributes.ExtendedAssetUrls.EnhancedHls = EnhancedHls_m3u8
		}
	}
	var Quality string
	if strings.Contains(core.Config.SongFileFormat, "Quality") {
		if core.Dl_atmos {
			Quality = fmt.Sprintf("%dkbps", *core.Atmos_max-2000)
		} else if core.Dl_aac && *core.Aac_type == "aac-lc" {
			Quality = "256kbps"
		} else if core.Dl_aac {
			// For other AAC types, try to extract quality from M3U8
			if manifest.Attributes.ExtendedAssetUrls.EnhancedHls != "" {
				_, Quality, _, err = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, true)
				if err != nil {
					Quality = ""
				}
			} else {
				Quality = "AAC"
			}
		} else {
			_, Quality, _, err = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, true)
			if err != nil {
				Quality = ""
			}
		}
	}
	// Determine quality tag: RESPECT USER CHOICE FIRST, then fallback to auto-detection
	// {Tag} variable is specifically for audio quality
	var Tag_string string

	// Priority 1: Respect user's explicit quality choice
	if core.Dl_atmos {
		Tag_string = utils.FormatQualityTag("Dolby Atmos")
	} else if core.Dl_aac && *core.Aac_type == "aac-binaural" {
		Tag_string = utils.FormatQualityTag("Aac Binaural")
	} else if core.Dl_aac && *core.Aac_type == "aac-downmix" {
		Tag_string = utils.FormatQualityTag("Aac Downmix")
	} else if core.Dl_aac && *core.Aac_type == "aac-lc" {
		Tag_string = utils.FormatQualityTag("Aac 256")
	} else if core.Dl_aac {
		// Generic AAC mode - check if user wants specific type
		if *core.Aac_type != "aac" {
			Tag_string = utils.FormatQualityTag("Aac " + strings.Title(*core.Aac_type))
		} else {
			Tag_string = utils.FormatQualityTag("Aac 256")
		}
	} else {
		// Priority 2: Auto-detect best quality when user didn't specify
		if utils.Contains(track.Attributes.AudioTraits, "hi-res-lossless") {
			Tag_string = utils.FormatQualityTag("Hi-Res Lossless")
		} else if utils.Contains(track.Attributes.AudioTraits, "lossless") {
			Tag_string = utils.FormatQualityTag("Alac")
		} else if utils.Contains(track.Attributes.AudioTraits, "atmos") {
			Tag_string = utils.FormatQualityTag("Dolby Atmos")
		} else {
			Tag_string = utils.FormatQualityTag("Aac 256")
		}
	}

	trackNum := -1
	for i, t := range meta.Data[0].Relationships.Tracks.Data {
		if t.ID == track.ID {
			trackNum = i + 1
			break
		}
	}
	if trackNum == -1 {
		return "", errors.New("track not found in metadata")
	}

	var singerFoldername, albumFoldername string
	if core.Config.ArtistFolderFormat != "" {
		if strings.Contains(albumId, "pl.") {
			singerFoldername = strings.NewReplacer(
				"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
			).Replace(core.Config.ArtistFolderFormat)
		} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
			).Replace(core.Config.ArtistFolderFormat)
		} else {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", "",
			).Replace(core.Config.ArtistFolderFormat)
		}
	}

	// 检查是否为虚拟Singles专辑
	isSingle := core.IsSingleAlbum(meta)

	// 对于虚拟Singles专辑，提前计算有效的曲目编号（在整个函数中复用，避免重复调用）
	effectiveTrackNum := trackNum
	var primaryArtist string
	if isSingle {
		primaryArtist = core.GetPrimaryArtist(meta.Data[0].Attributes.ArtistName)
		effectiveTrackNum = core.GetVirtualSinglesTrackNumber(primaryArtist)
		// 保存有效曲目编号，供后续WriteMP4Tags使用（确保文件名和标签编号一致）
		core.SetTrackEffectiveNumber(track.ID, effectiveTrackNum)
	}

	if strings.Contains(albumId, "pl.") {
		albumFoldername = strings.NewReplacer(
			"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{PlaylistId}", albumId, "{Quality}", Quality, "{Codec}", Codec, "{Tag}", Tag_string,
		).Replace(core.Config.PlaylistFolderFormat)
	} else if isSingle {
		// 虚拟Singles专辑：使用主要艺术家名（处理合作者情况）
		singlesFolder := core.Config.VirtualSinglesFolderName
		if singlesFolder == "" {
			singlesFolder = "Singles"
		}
		// 格式: "Olivia Rodrigo - Singles"
		albumFoldername = fmt.Sprintf("%s - %s", core.LimitString(primaryArtist), singlesFolder)
	} else {
		albumFoldername = strings.NewReplacer(
			"{ReleaseDate}", meta.Data[0].Attributes.ReleaseDate, "{ReleaseYear}", meta.Data[0].Attributes.ReleaseDate[:4],
			"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName), "{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{UPC}", meta.Data[0].Attributes.Upc, "{RecordLabel}", meta.Data[0].Attributes.RecordLabel,
			"{Copyright}", meta.Data[0].Attributes.Copyright, "{AlbumId}", albumId,
			"{Quality}", Quality, "{Codec}", Codec, "{Tag}", Tag_string,
		).Replace(core.Config.AlbumFolderFormat)
	}

	songName := strings.NewReplacer(
		"{SongId}", track.ID,
		"{SongNumer}", fmt.Sprintf("%02d", effectiveTrackNum),
		"{SongName}", core.LimitString(track.Attributes.Name),
		"{DiscNumber}", fmt.Sprintf("%0d", track.Attributes.DiscNumber),
		"{TrackNumber}", fmt.Sprintf("%0d", track.Attributes.TrackNumber),
		"{Quality}", Quality,
		"{Tag}", Tag_string,
		"{Codec}", Codec,
	).Replace(core.Config.SongFileFormat)

	sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
	sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")
	sanitizedSongName := core.ForbiddenNames.ReplaceAllString(songName, "_")
	filenameWithExt := fmt.Sprintf("%s.m4a", sanitizedSongName)

	finalArtistDir, finalAlbumDir, finalFilename := utils.EnsureSafePath(baseSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, filenameWithExt)
	var finalSingerFolder string
	if finalArtistDir != "" {
		finalSingerFolder = filepath.Join(baseSaveFolder, finalArtistDir)
	} else {
		finalSingerFolder = baseSaveFolder
	}
	finalAlbumFolder := filepath.Join(finalSingerFolder, finalAlbumDir)
	if err := os.MkdirAll(finalAlbumFolder, 0755); err != nil {
		return "", fmt.Errorf("创建专辑目录失败: %w", err)
	}
	trackPath := filepath.Join(finalAlbumFolder, finalFilename)

	// 检查文件是否存在：如果使用缓存，检查最终目标路径；否则检查当前路径
	checkPath := trackPath
	returnPath := trackPath
	if finalSaveFolder != baseSaveFolder {
		// 使用缓存时，检查最终目标路径是否已存在文件
		var targetSingerFolder string
		if finalArtistDir != "" {
			targetSingerFolder = filepath.Join(finalSaveFolder, finalArtistDir)
		} else {
			targetSingerFolder = finalSaveFolder
		}
		targetAlbumFolder := filepath.Join(targetSingerFolder, finalAlbumDir)
		checkPath = filepath.Join(targetAlbumFolder, finalFilename)
		returnPath = checkPath // 如果文件已存在，返回最终目标路径而非缓存路径
	}

	// 强制下载模式跳过文件存在性检查
	if !core.ForceDownload {
		exists, err := utils.FileExists(checkPath)
		if err != nil {
			return "", errors.New("failed to check if track exists")
		}
		if exists {
			core.SharedLock.Lock()
			core.OkDict[albumId] = append(core.OkDict[albumId], trackNum)
			core.SharedLock.Unlock()
			return returnPath, nil // 返回实际存在文件的路径
		}
	}

	if core.Dl_aac && *core.Aac_type == "aac-lc" {
		if len(account.MediaUserToken) <= 50 {
			return "", errors.New("invalid media-user-token")
		}
		_, err := runv3.Run(track.ID, trackPath, core.DeveloperToken, account.MediaUserToken, false)
		if err != nil {
			return "", fmt.Errorf("failed to dl aac-lc: %w", err)
		}
	} else {
		trackM3u8Url, _, _, err := parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, false)
		if err != nil {
			return "", fmt.Errorf("failed to extract info from manifest: %w", err)
		}
		err = runv14.Run(track.ID, trackM3u8Url, trackPath, account, core.Config, progressChan)
		if err != nil {
			return "", fmt.Errorf("failed to run v14 with account %s: %w", account.Name, err)
		}
	}

	tags := []string{
		"tool=",
	}
	var trackCovPath string
	if core.Config.EmbedCover {
		// 对于Singles虚拟专辑，每个单曲内嵌其原始封面（嵌入后删除临时文件）
		if isSingle {
			// 下载单曲的原始封面作为临时文件
			trackCovPath, err = metadata.WriteCover(finalAlbumFolder, track.ID, track.Attributes.Artwork.URL)
			if err == nil {
				tags = append(tags, fmt.Sprintf("cover=%s", trackCovPath))
			}
		} else if strings.Contains(albumId, "pl.") && core.Config.DlAlbumcoverForPlaylist {
			_, _, safeCoverFilename := utils.EnsureSafePath(baseSaveFolder, finalArtistDir, finalAlbumDir, track.ID+".jpg")
			trackCovPath, err = metadata.WriteCover(finalAlbumFolder, strings.TrimSuffix(safeCoverFilename, ".jpg"), track.Attributes.Artwork.URL)
			if err == nil {
				tags = append(tags, fmt.Sprintf("cover=%s", trackCovPath))
			}
		} else {
			tags = append(tags, fmt.Sprintf("cover=%s", covPath))
		}
	}
	tagsString := strings.Join(tags, ":")
	cmd := exec.Command("MP4Box", "-quiet", "-itags", tagsString, trackPath)
	_ = cmd.Run()
	// 删除临时封面文件：播放列表和Singles虚拟专辑都需要删除
	if trackCovPath != "" && (isSingle || (strings.Contains(albumId, "pl.") && core.Config.DlAlbumcoverForPlaylist)) {
		_ = os.Remove(trackCovPath)
	}

	core.OkDict[albumId] = append(core.OkDict[albumId], trackNum)
	return trackPath, nil
}

func Rip(albumId string, storefront string, urlArg_i string, urlRaw string, notifier *progress.ProgressNotifier) error {
	mainAccount, err := core.GetAccountForStorefront(storefront)
	if err != nil {
		return err
	}

	var covPath string // 存储专辑封面路径，用于虚拟Singles专辑
	var isSingle bool  // 标识是否为虚拟Singles专辑

	meta, err := api.GetMeta(albumId, mainAccount, storefront)
	if err != nil {
		return err
	}
	var lyricAccount *structs.Account
	for i := range core.Config.Accounts {
		acc := &core.Config.Accounts[i]
		if strings.EqualFold(acc.Storefront, storefront) {
			lyricAccount = acc
			break
		}
	}

	if lyricAccount == nil && core.Config.DefaultLyricStorefront != "" {
		for i := range core.Config.Accounts {
			acc := &core.Config.Accounts[i]
			if strings.EqualFold(acc.Storefront, core.Config.DefaultLyricStorefront) {
				lyricAccount = acc
				break
			}
		}
	}

	if core.Debug_mode {
		if len(meta.Data[0].Relationships.Tracks.Data) > 0 {
			firstTrack := meta.Data[0].Relationships.Tracks.Data[0]
			manifest, err := api.GetInfoFromAdam(firstTrack.ID, mainAccount, storefront)
			if err == nil && manifest.Attributes.ExtendedAssetUrls.EnhancedHls != "" {
				_, _, _, _ = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, true)
			}
		}
		return nil
	}

	var Codec string
	if core.Dl_atmos {
		Codec = "ATMOS"
	} else if core.Dl_aac {
		Codec = "AAC"
	} else {
		Codec = "ALAC"
	}

	var baseSaveFolder string
	var finalSaveFolder string
	var usingCache bool
	if core.Dl_atmos {
		finalSaveFolder = core.Config.AtmosSaveFolder
	} else if core.Dl_aac {
		finalSaveFolder = core.Config.AacSaveFolder
	} else {
		finalSaveFolder = core.Config.AlacSaveFolder
	}

	// 使用缓存机制
	baseSaveFolder, finalSaveFolder, usingCache = GetCacheBasePath(finalSaveFolder, albumId)

	// 延迟清理函数：如果使用缓存且出错，清理缓存目录
	var downloadSuccess bool
	defer func() {
		if usingCache && !downloadSuccess {
			utils.CleanupCacheDirectory(baseSaveFolder)
		}
	}()

	var singerFoldername, albumFoldername string
	if core.Config.ArtistFolderFormat != "" {
		if strings.Contains(albumId, "pl.") {
			singerFoldername = strings.NewReplacer(
				"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
			).Replace(core.Config.ArtistFolderFormat)
		} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
			).Replace(core.Config.ArtistFolderFormat)
		} else {
			singerFoldername = strings.NewReplacer(
				"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
				"{ArtistId}", "",
			).Replace(core.Config.ArtistFolderFormat)
		}
	}

	var Quality string

	// Pre-detect album quality by checking all tracks' audio traits
	// This ensures we use the correct tag from the start, avoiding duplicate folders
	isHires := false
	isLossless := false
	hasAtmos := false
	if !core.Dl_atmos && !core.Dl_aac {
		for _, track := range meta.Data[0].Relationships.Tracks.Data {
			if utils.Contains(track.Attributes.AudioTraits, "hi-res-lossless") {
				isHires = true
				break
			}
			if utils.Contains(track.Attributes.AudioTraits, "lossless") {
				isLossless = true
			}
			if utils.Contains(track.Attributes.AudioTraits, "atmos") {
				hasAtmos = true
			}
		}
	}

	// Determine Album Quality Tag: RESPECT USER CHOICE FIRST, then fallback to auto-detection
	var Album_Tag_string string

	// Priority 1: Respect user's explicit quality choice
	if core.Dl_atmos {
		Album_Tag_string = utils.FormatQualityTag("Dolby Atmos")
	} else if core.Dl_aac && *core.Aac_type == "aac-binaural" {
		Album_Tag_string = utils.FormatQualityTag("Aac Binaural")
	} else if core.Dl_aac && *core.Aac_type == "aac-downmix" {
		Album_Tag_string = utils.FormatQualityTag("Aac Downmix")
	} else if core.Dl_aac && *core.Aac_type == "aac-lc" {
		Album_Tag_string = utils.FormatQualityTag("Aac 256")
	} else if core.Dl_aac {
		// Generic AAC mode - check if user wants specific type
		if *core.Aac_type != "aac" {
			Album_Tag_string = utils.FormatQualityTag("Aac " + strings.Title(*core.Aac_type))
		} else {
			Album_Tag_string = utils.FormatQualityTag("Aac 256")
		}
	} else {
		// Priority 2: Auto-detect best quality when user didn't specify download mode
		if isHires {
			Album_Tag_string = utils.FormatQualityTag("Hi-Res Lossless")
		} else if isLossless {
			Album_Tag_string = utils.FormatQualityTag("Alac")
		} else if hasAtmos {
			Album_Tag_string = utils.FormatQualityTag("Dolby Atmos")
		} else {
			Album_Tag_string = utils.FormatQualityTag("Aac 256")
		}
	}

	// 检查是否为虚拟Singles专辑
	isSingle = core.IsSingleAlbum(meta)

	if strings.Contains(albumId, "pl.") {
		albumFoldername = strings.NewReplacer(
			"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{PlaylistId}", albumId, "{Quality}", Quality, "{Codec}", Codec, "{Tag}", Album_Tag_string,
		).Replace(core.Config.PlaylistFolderFormat)
	} else if isSingle {
		// 虚拟Singles专辑：使用主要艺术家名（处理合作者情况）
		singlesFolder := core.Config.VirtualSinglesFolderName
		if singlesFolder == "" {
			singlesFolder = "Singles"
		}
		// 提取主要艺术家（处理合作者：取第一个&之前的名字）
		primaryArtist := core.GetPrimaryArtist(meta.Data[0].Attributes.ArtistName)
		// 格式: "Olivia Rodrigo - Singles"
		albumFoldername = fmt.Sprintf("%s - %s", core.LimitString(primaryArtist), singlesFolder)
	} else {
		albumFoldername = strings.NewReplacer(
			"{ReleaseDate}", meta.Data[0].Attributes.ReleaseDate, "{ReleaseYear}", meta.Data[0].Attributes.ReleaseDate[:4],
			"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName), "{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
			"{UPC}", meta.Data[0].Attributes.Upc, "{RecordLabel}", meta.Data[0].Attributes.RecordLabel,
			"{Copyright}", meta.Data[0].Attributes.Copyright, "{AlbumId}", albumId,
			"{Quality}", Quality, "{Codec}", Codec, "{Tag}", Album_Tag_string,
		).Replace(core.Config.AlbumFolderFormat)
	}

	sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
	sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")

	var longestFilename string
	for i := range meta.Data[0].Relationships.Tracks.Data {
		if len(meta.Data[0].Relationships.Tracks.Data[i].Attributes.Name) > len(longestFilename) {
			longestFilename = meta.Data[0].Relationships.Tracks.Data[i].Attributes.Name
		}
	}
	longestFilename = strings.NewReplacer(
		"{SongName}", longestFilename,
		"{SongNumer}", "99",
		"{Quality}", "24B-192.0kHz",
		"{Tag}", core.Config.AppleMasterChoice+" "+core.Config.ExplicitChoice,
		"{Codec}", "ATMOS",
	).Replace(core.Config.SongFileFormat) + ".m4a"

	finalArtistDir, finalAlbumDir, _ := utils.EnsureSafePath(baseSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, longestFilename)

	var finalSingerFolder string
	if finalArtistDir != "" {
		finalSingerFolder = filepath.Join(baseSaveFolder, finalArtistDir)
	} else {
		finalSingerFolder = baseSaveFolder
	}
	finalAlbumFolder := filepath.Join(finalSingerFolder, finalAlbumDir)
	if err := os.MkdirAll(finalAlbumFolder, 0755); err != nil {
		return fmt.Errorf("创建专辑目录失败: %w", err)
	}

	core.SafePrintf("🎤 歌手: %s\n", meta.Data[0].Attributes.ArtistName)
	core.SafePrintf("💽 专辑: %s\n", meta.Data[0].Attributes.Name)

	if core.Config.SaveArtistCover && !(strings.Contains(albumId, "pl.")) {
		if len(meta.Data[0].Relationships.Artists.Data) > 0 {
			_, err = metadata.WriteCover(finalSingerFolder, "folder", meta.Data[0].Relationships.Artists.Data[0].Attributes.Artwork.Url)
			if err != nil {
			}
		}
	}
	// 处理专辑封面
	if isSingle {
		// 对于虚拟Singles专辑，不下载统一的封面文件
		// 每个单曲会在downloadTrackSilently中保存自己独立的封面（文件名与m4a一致）
		// covPath 保持空值，downloadTrackSilently 会为每个单曲单独下载封面
		covPath = ""
	} else {
		// 非虚拟Singles专辑，下载统一的专辑封面
		var err error
		covPath, err = metadata.WriteCover(finalAlbumFolder, "cover", meta.Data[0].Attributes.Artwork.URL)
		if err != nil {
		}
	}
	if core.Config.SaveAnimatedArtwork && meta.Data[0].Attributes.EditorialVideo.MotionDetailSquare.Video != "" {
		motionvideoUrlSquare, _, err := parser.ExtractVideo(meta.Data[0].Attributes.EditorialVideo.MotionDetailSquare.Video)
		if err == nil {
			exists, _ := utils.FileExists(filepath.Join(finalAlbumFolder, "square_animated_artwork.mp4"))
			if !exists {
				cmd := exec.Command("ffmpeg", "-loglevel", "quiet", "-y", "-i", motionvideoUrlSquare, "-c", "copy", filepath.Join(finalAlbumFolder, "square_animated_artwork.mp4"))
				_ = cmd.Run()
			}
		}

		if core.Config.EmbyAnimatedArtwork {
			cmd3 := exec.Command("ffmpeg", "-loglevel", "quiet", "-y", "-i", filepath.Join(finalAlbumFolder, "square_animated_artwork.mp4"), "-vf", "scale=440:-1", "-r", "24", "-f", "gif", filepath.Join(finalAlbumFolder, "folder.jpg"))
			_ = cmd3.Run()
		}

		motionvideoUrlTall, _, err := parser.ExtractVideo(meta.Data[0].Attributes.EditorialVideo.MotionDetailTall.Video)
		if err == nil {
			exists, _ := utils.FileExists(filepath.Join(finalAlbumFolder, "tall_animated_artwork.mp4"))
			if !exists {
				cmd := exec.Command("ffmpeg", "-loglevel", "quiet", "-y", "-i", motionvideoUrlTall, "-c", "copy", filepath.Join(finalAlbumFolder, "tall_animated_artwork.mp4"))
				_ = cmd.Run()
			}
		}
	}

	// SelectTracks可能涉及交互式输入，暂停UI
	if !core.DisableDynamicUI && core.Dl_select {
		ui.Suspend()
	}
	selected := ui.SelectTracks(meta, storefront, urlArg_i)
	if !core.DisableDynamicUI && core.Dl_select {
		ui.Resume()
	}

	core.SafePrintln("🔬 正在进行版权预检，请稍候...")
	var workingAccounts []structs.Account
	if len(meta.Data[0].Relationships.Tracks.Data) > 0 {
		firstTrackId := meta.Data[0].Relationships.Tracks.Data[0].ID
		for _, acc := range core.Config.Accounts {
			_, err := api.GetInfoFromAdam(firstTrackId, &acc, acc.Storefront)
			if err == nil {
				workingAccounts = append(workingAccounts, acc)
			} else {
				core.SafePrintf("账户 [%s] 无法访问此专辑 (可能无版权)，本次任务将跳过该账户。\n", acc.Name)
			}
		}
	} else {
		return errors.New("专辑中没有曲目")
	}

	if len(workingAccounts) == 0 {
		return errors.New("所有账户均无法访问此专辑，任务中止")
	}

	albumQualityType := "AAC"
	albumQualityString := "AAC"

	// Priority 1: Respect user's explicit quality choice for display
	if core.Dl_atmos {
		albumQualityType = "Dolby Atmos"
		albumQualityString = "Dolby Atmos"
	} else if core.Dl_aac && *core.Aac_type == "aac-binaural" {
		albumQualityType = "AAC Binaural"
		albumQualityString = "AAC Binaural"
	} else if core.Dl_aac && *core.Aac_type == "aac-downmix" {
		albumQualityType = "AAC Downmix"
		albumQualityString = "AAC Downmix"
	} else if core.Dl_aac && *core.Aac_type == "aac-lc" {
		albumQualityType = "AAC 256"
		albumQualityString = "AAC 256"
	} else if core.Dl_aac {
		// Generic AAC mode - check if user wants specific type
		if *core.Aac_type != "aac" {
			albumQualityType = "AAC " + strings.Title(*core.Aac_type)
			albumQualityString = "AAC " + strings.Title(*core.Aac_type)
		} else {
			albumQualityType = "AAC"
			albumQualityString = "AAC"
		}
	} else {
		// Priority 2: Auto-detect quality for display when user didn't specify
		// isHires and isLossless already declared earlier, just reset them
		isHires = false
		isLossless = false

		for _, trackIndex := range selected {
			track := meta.Data[0].Relationships.Tracks.Data[trackIndex-1]
			if utils.Contains(track.Attributes.AudioTraits, "hi-res-lossless") {
				isHires = true
				break
			}
			if utils.Contains(track.Attributes.AudioTraits, "lossless") {
				isLossless = true
			}
		}

		if isHires {
			albumQualityType = "Hi-Res Lossless"
			albumQualityString = "Hi-Res Lossless"
			// Update Album_Tag_string for Hi-Res Lossless
			if !core.Dl_atmos && !core.Dl_aac {
				Album_Tag_string = utils.FormatQualityTag("Hi-Res Lossless")
			}
		} else if isLossless {
			albumQualityType = "Lossless"
			albumQualityString = "Lossless"
			// Alac tag is already set as default for lossless
		}
	}

	var numThreads int
	switch albumQualityType {
	case "Hi-Res Lossless":
		numThreads = core.Config.HiresDownloadThreads
	case "Lossless":
		numThreads = core.Config.LosslessDownloadThreads
	default: // "AAC"
		numThreads = core.Config.AacDownloadThreads
	}

	if numThreads < 1 {
		numThreads = 1
	}

	regionSet := make(map[string]bool)
	for _, acc := range workingAccounts {
		if acc.Storefront != "" {
			regionSet[strings.ToUpper(acc.Storefront)] = true
		}
	}
	var regionNames []string
	for r := range regionSet {
		regionNames = append(regionNames, r)
	}
	sort.Strings(regionNames)
	regionsStr := strings.Join(regionNames, " / ")

	yellow := color.New(color.FgYellow).SprintFunc()
	green := color.New(color.FgGreen).SprintFunc()
	core.SafePrintf("%s %s | %s | %s | %s\n",
		green("📡 音源:"),
		green(albumQualityString),
		green(fmt.Sprintf("%d 线程", numThreads)),
		yellow(regionsStr),
		green(fmt.Sprintf("%d 个账户并行下载", len(workingAccounts))),
	)
	core.SafePrintln(strings.Repeat("-", 45))

	core.RipLock.Lock()
	defer core.RipLock.Unlock()

	// 强制下载模式下跳过文件存在性预检
	if !core.ForceDownload {
		// 快速检查所有文件是否已存在（仅文件系统检查，不读取内容）
		var checkSaveFolder string
		if usingCache {
			checkSaveFolder = finalSaveFolder // 使用缓存时检查最终目标路径
		} else {
			checkSaveFolder = baseSaveFolder
		}

		allFilesExist := true
		for _, trackNum := range selected {
			track := meta.Data[0].Relationships.Tracks.Data[trackNum-1]

			// 快速构建文件路径
			var singerFoldername, albumFoldername string
			if core.Config.ArtistFolderFormat != "" {
				if strings.Contains(albumId, "pl.") {
					singerFoldername = strings.NewReplacer(
						"{ArtistName}", "Apple Music", "{ArtistId}", "", "{UrlArtistName}", "Apple Music",
					).Replace(core.Config.ArtistFolderFormat)
				} else if len(meta.Data[0].Relationships.Artists.Data) > 0 {
					singerFoldername = strings.NewReplacer(
						"{UrlArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
						"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
						"{ArtistId}", meta.Data[0].Relationships.Artists.Data[0].ID,
					).Replace(core.Config.ArtistFolderFormat)
				}
			}

			if strings.Contains(albumId, "pl.") {
				albumFoldername = strings.NewReplacer(
					"{PlaylistName}", core.LimitString(meta.Data[0].Attributes.Name),
					"{PlaylistId}", albumId,
				).Replace(core.Config.PlaylistFolderFormat)
			} else if isSingle {
				// 虚拟Singles专辑：使用主要艺术家名（处理合作者情况）
				singlesFolder := core.Config.VirtualSinglesFolderName
				if singlesFolder == "" {
					singlesFolder = "Singles"
				}
				// 提取主要艺术家（处理合作者：取第一个&之前的名字）
				primaryArtist := core.GetPrimaryArtist(meta.Data[0].Attributes.ArtistName)
				// 格式: "Olivia Rodrigo - Singles"
				albumFoldername = fmt.Sprintf("%s - %s", core.LimitString(primaryArtist), singlesFolder)
			} else {
				albumFoldername = strings.NewReplacer(
					"{ArtistName}", core.LimitString(meta.Data[0].Attributes.ArtistName),
					"{AlbumName}", core.LimitString(meta.Data[0].Attributes.Name),
					"{AlbumId}", albumId,
				).Replace(core.Config.AlbumFolderFormat)
			}

			songName := strings.NewReplacer(
				"{SongNumer}", fmt.Sprintf("%02d", trackNum),
				"{SongName}", core.LimitString(track.Attributes.Name),
			).Replace(core.Config.SongFileFormat)

			sanitizedSingerFolder := core.ForbiddenNames.ReplaceAllString(singerFoldername, "_")
			sanitizedAlbumFolder := core.ForbiddenNames.ReplaceAllString(albumFoldername, "_")
			sanitizedSongName := core.ForbiddenNames.ReplaceAllString(songName, "_")
			filenameWithExt := fmt.Sprintf("%s.m4a", sanitizedSongName)

			checkArtistDir, checkAlbumDir, checkFilename := utils.EnsureSafePath(checkSaveFolder, sanitizedSingerFolder, sanitizedAlbumFolder, filenameWithExt)
			var checkSingerFolder string
			if checkArtistDir != "" {
				checkSingerFolder = filepath.Join(checkSaveFolder, checkArtistDir)
			} else {
				checkSingerFolder = checkSaveFolder
			}
			checkAlbumFolder := filepath.Join(checkSingerFolder, checkAlbumDir)
			checkFilePath := filepath.Join(checkAlbumFolder, checkFilename)

			// 仅使用文件系统检查，不读取内容
			exists, _ := utils.FileExists(checkFilePath)
			if !exists {
				allFilesExist = false
				break
			}
		}

		// 如果所有文件都已存在，直接跳过
		if allFilesExist && len(selected) > 0 {
			green := color.New(color.FgGreen).SprintFunc()
			core.SafePrintln(green("✅ 所有文件已存在，任务完成！"))
			// 标记所有文件为已完成
			for _, trackNum := range selected {
				core.SharedLock.Lock()
				core.OkDict[albumId] = append(core.OkDict[albumId], trackNum)
				core.Counter.Total++
				core.Counter.Success++
				core.SharedLock.Unlock()
			}
			return nil
		}
	} else {
		core.SafePrintf("💪 强制下载模式：将覆盖已存在的文件\n")
	}

	// 使用批次迭代器进行数据层分批处理
	batchIterator := structs.NewBatchIterator(selected, core.Config.BatchSize)

	for batch, hasMore := batchIterator.Next(); hasMore; batch, hasMore = batchIterator.Next() {
		// 显示批次开始信息（多批次时）
		if batch.TotalBatches > 1 {
			if !core.DisableDynamicUI {
				ui.Suspend()
			}
			cyan := color.New(color.FgCyan).SprintFunc()
			core.SafePrintf("%s\n", cyan(fmt.Sprintf("📦 批次 %d/%d（%d 首）", batch.BatchNum, batch.TotalBatches, batch.BatchSize)))
			if !core.DisableDynamicUI {
				ui.Resume()
			}
		}

		// 初始化当前批次的 TrackStatuses
		core.TrackStatuses = make([]core.TrackStatus, len(batch.Tracks))
		for i, trackNum := range batch.Tracks {
			track := meta.Data[0].Relationships.Tracks.Data[trackNum-1]

			// 跳过 music-videos 的质量检测
			quality := "N/A"
			if track.Type == "music-videos" {
				quality = "MV"
			} else {
				manifest, err := api.GetInfoFromAdam(track.ID, mainAccount, storefront)
				if err == nil && manifest.Attributes.ExtendedAssetUrls.EnhancedHls != "" {
					_, _, quality, err = parser.ExtractMedia(manifest.Attributes.ExtendedAssetUrls.EnhancedHls, false)
					if err != nil {
						quality = "获取失败"
					}
				} else {
					quality = "AAC 256kbps"
				}
			}

			core.TrackStatuses[i] = core.TrackStatus{
				Index:       i,
				TrackNum:    trackNum,
				TrackTotal:  len(meta.Data[0].Relationships.Tracks.Data),
				TrackName:   track.Attributes.Name,
				Quality:     fmt.Sprintf("(%s)", quality),
				Status:      "等待中",
				StatusColor: color.New(color.FgWhite).SprintFunc(),
			}
		}

		doneUI := make(chan struct{})
		// 只有在未禁用动态UI时才启动UI渲染
		if !core.DisableDynamicUI {
			// 动态UI期间：将logger输出重定向到stderr，避免干扰光标定位
			// UI使用stdout输出（带光标移动），logger使用stderr，互不干扰
			logger.SetOutput(os.Stderr)
			go ui.RenderUI(doneUI)
		}

		var wg sync.WaitGroup
		semaphore := make(chan struct{}, numThreads)

		for i, trackNum := range batch.Tracks {
			wg.Add(1)
			go func(trackIndexInMeta int, statusIndex int) {
				semaphore <- struct{}{}
				defer func() {
					<-semaphore
					wg.Done()
				}()

				trackData := meta.Data[0].Relationships.Tracks.Data[trackIndexInMeta-1]

				core.SharedLock.Lock()
				isDone := utils.IsInArray(core.OkDict[albumId], trackIndexInMeta)
				core.SharedLock.Unlock()

				if isDone {
					if notifier != nil {
						notifier.NotifyStatus(statusIndex, "已存在", "skipped")
					}
					core.SharedLock.Lock()
					core.Counter.Total++
					core.Counter.Success++
					core.SharedLock.Unlock()
					return
				}

				red := color.New(color.FgRed).SprintFunc()
				yellow := color.New(color.FgYellow).SprintFunc()

				const PostDownloadMaxRetries = 3

				for attempt := 1; attempt <= PostDownloadMaxRetries; attempt++ {
					// 重试信息移到错误处理部分统一显示

					// 使用适配器模式：旧的progressChan机制自动转换为新的事件系统
					var progressChan chan runv14.ProgressUpdate
					if notifier != nil {
						adapter := progress.NewProgressAdapter(notifier, statusIndex, "download")
						ch := make(chan runv14.ProgressUpdate, 10)
						// 启动适配器
						go func() {
							adaptCh := adapter.ToRunv14Chan()
							for p := range ch {
								adaptCh <- p
							}
							close(adaptCh)
						}()
						progressChan = ch
					} else {
						// 降级：如果没有notifier，仍使用旧方式
						ch := make(chan runv14.ProgressUpdate, 10)
						go func() {
							for p := range ch {
								speedStr := utils.FormatSpeed(p.SpeedBPS)
								account := &workingAccounts[statusIndex%len(workingAccounts)]
								accountInfo := fmt.Sprintf("%s 账号", strings.ToUpper(account.Storefront))
								var status string
								if p.Stage == "decrypt" {
									status = fmt.Sprintf("%s %s %d%% (%s)", yellow(accountInfo), red("解密中"), p.Percentage, speedStr)
								} else {
									status = fmt.Sprintf("%s 下载中 %d%% (%s)", yellow(accountInfo), p.Percentage, speedStr)
								}
								ui.UpdateStatus(statusIndex, status, color.New(color.FgYellow).SprintFunc())
							}
						}()
						progressChan = ch
					}

					trackPath, err := downloadTrackWithFallback(trackData, meta, albumId, storefront, baseSaveFolder, finalSaveFolder, Codec, covPath, workingAccounts, statusIndex, statusIndex, ui.UpdateStatus, progressChan)
					close(progressChan)

					if err != nil {
						// downloadTrackWithFallback has its own retries. If it fails, we consider it a permanent failure for this track.

						// 截断错误信息，避免换行
						errorMsg := err.Error()
						if len(errorMsg) > 50 {
							errorMsg = errorMsg[:47] + "..."
						}

						core.SharedLock.Lock()
						core.Counter.Total++
						// 检查是否是跳过类型的错误
						if strings.Contains(err.Error(), "已跳过") {
							if notifier != nil {
								notifier.NotifyStatus(statusIndex, errorMsg, "skipped")
							}
							// 跳过不计入错误统计
						} else {
							if notifier != nil {
								notifier.NotifyError(statusIndex, fmt.Errorf("下载失败: %s", errorMsg))
							}
							core.Counter.Error++
						}
						core.SharedLock.Unlock()
						return
					}

					var postDownloadError error
					wasFixed := false

					// Step 2: Re-encode if necessary
					if core.Config.FfmpegFix && trackData.Type != "music-videos" {
						isAAC := core.Dl_aac && *core.Aac_type == "aac-lc"
						if !isAAC {
							var fixErr error
							wasFixed, fixErr = checkAndReEncodeTrack(trackPath, statusIndex, notifier)
							if fixErr != nil {
								postDownloadError = fmt.Errorf("修复失败: %w", fixErr)
							}
						}
					}

					// Step 3: Write tags (only if previous step was successful)
					if postDownloadError == nil {
						var finalLrc string
						if lyricAccount != nil && (core.Config.EmbedLrc || core.Config.SaveLrcFile) && trackData.Type != "music-videos" {
							lrcStr, lrcErr := lyrics.Get(storefront, trackData.ID, core.Config.LrcType, core.Config.Language, core.Config.LrcFormat, core.DeveloperToken, lyricAccount.MediaUserToken)
							if lrcErr == nil {
								if core.Config.SaveLrcFile {
									lrcFilename := fmt.Sprintf("%s.lrc", strings.TrimSuffix(filepath.Base(trackPath), filepath.Ext(filepath.Base(trackPath))))
									_ = metadata.WriteLyrics(filepath.Dir(trackPath), lrcFilename, lrcStr)
								}
								if core.Config.EmbedLrc {
									finalLrc = lrcStr
								}
							}
						}

						// 使用带自动修复功能的标签写入
						tagErr := metadata.WriteMP4TagsWithRetry(trackPath, finalLrc, meta, trackIndexInMeta, len(meta.Data[0].Relationships.Tracks.Data))
						if tagErr != nil {
							// AAC文件标签写入失败时不删除文件（因为基本标签已通过MP4Box写入）
							if core.Dl_aac {
								logger.Warn("AAC文件标签写入失败，保留文件（已包含基本标签）: %v", tagErr)
								// 不设置 postDownloadError，继续执行
							} else {
								postDownloadError = fmt.Errorf("标签写入失败: %w", tagErr)
							}
						}
					}

					// Check if any post-download step failed
					if postDownloadError != nil {
						os.Remove(trackPath) // Delete the problematic file

						// 截断过长的错误信息，避免换行刷屏
						errorMsg := postDownloadError.Error()
						if len(errorMsg) > 50 {
							errorMsg = errorMsg[:47] + "..."
						}

						if attempt < PostDownloadMaxRetries {
							// 显示重试信息（原地更新，不刷屏）
							if notifier != nil {
								notifier.NotifyStatus(statusIndex, fmt.Sprintf("重试 %d/%d: %s", attempt, PostDownloadMaxRetries, errorMsg), "retry")
							}
							time.Sleep(1500 * time.Millisecond) // 缩短等待时间
							continue                            // Go to the next retry attempt
						} else {
							// 所有重试失败，跳过该曲目（不计入错误计数）
							if notifier != nil {
								notifier.NotifyStatus(statusIndex, "已跳过 (标签失败)", "skipped")
							}
							core.SharedLock.Lock()
							core.Counter.Total++
							// 不增加 Error 计数，视为跳过而非错误
							core.SharedLock.Unlock()
							return
						}
					}

					// All steps successful
					core.SharedLock.Lock()
					core.Counter.Total++
					core.Counter.Success++
					if wasFixed {
						if notifier != nil {
							notifier.NotifyStatus(statusIndex, "重编码完成", "complete")
						}
					} else {
						if notifier != nil {
							notifier.NotifyComplete(statusIndex)
						}
					}
					core.SharedLock.Unlock()
					return // Mission accomplished, exit goroutine
				}
			}(trackNum, i)
		}

		wg.Wait()
		close(doneUI)
		time.Sleep(200 * time.Millisecond)
		ui.PrintUI(false) // 批次完成后的最后一次打印，非首次更新

		// UI结束后：恢复logger输出到stdout
		if !core.DisableDynamicUI {
			logger.SetOutput(os.Stdout)
		}

		// 如果使用了缓存，批次完成后立即转移文件（多批次且不是最后一批）
		if usingCache && batch.TotalBatches > 1 && !batch.IsLast {
			// 检查缓存hash目录中是否有新文件需要转移
			cacheHashDir := baseSaveFolder

			hasFilesToMove := false
			filepath.Walk(cacheHashDir, func(path string, info os.FileInfo, err error) error {
				if err != nil {
					return nil
				}
				if !info.IsDir() && strings.HasSuffix(path, ".m4a") {
					hasFilesToMove = true
					return filepath.SkipDir
				}
				return nil
			})

			if hasFilesToMove {
				// 有新文件，需要转移
				if !core.DisableDynamicUI {
					ui.Suspend()
				}
				cyan := color.New(color.FgCyan).SprintFunc()
				core.SafePrintf("%s\n", cyan(fmt.Sprintf("📤 批次 %d/%d: 转移文件...", batch.BatchNum, batch.TotalBatches)))

				// 递归转移所有文件
				moveCount := 0
				batchSkippedCount := 0
				filepath.Walk(cacheHashDir, func(cachePath string, info os.FileInfo, walkErr error) error {
					if walkErr != nil || cachePath == cacheHashDir {
						return nil
					}

					relPath, err := filepath.Rel(cacheHashDir, cachePath)
					if err != nil {
						return nil
					}

					targetPath := filepath.Join(finalSaveFolder, relPath)

					if info.IsDir() {
						// 创建目录时使用 0755 权限
						if err := os.MkdirAll(targetPath, 0755); err != nil {
							// 目录创建失败，跳过
							return nil
						}
					} else if strings.HasSuffix(cachePath, ".m4a") || strings.HasSuffix(cachePath, ".jpg") {
						// SafeMoveFile 内部已检查目标文件存在性
						if err := utils.SafeMoveFile(cachePath, targetPath); err != nil {
							if strings.Contains(err.Error(), "目标文件已存在") {
								batchSkippedCount++
								// 静默跳过
							}
						} else {
							moveCount++
						}
					}
					return nil
				})

				if batchSkippedCount > 0 {
					core.SafePrintf("%s\n", color.New(color.FgGreen).SprintFunc()(fmt.Sprintf("✅ 批次 %d/%d: 转移完成（新增 %d，跳过 %d）", batch.BatchNum, batch.TotalBatches, moveCount, batchSkippedCount)))
				} else {
					core.SafePrintf("%s\n", color.New(color.FgGreen).SprintFunc()(fmt.Sprintf("✅ 批次 %d/%d: 转移完成（%d 个）", batch.BatchNum, batch.TotalBatches, moveCount)))
				}
				if !core.DisableDynamicUI {
					ui.Resume()
				}
			}
		}

		// 显示批次完成信息（多批次时）
		if batch.TotalBatches > 1 && !batch.IsLast {
			if !core.DisableDynamicUI {
				ui.Suspend()
			}
			green := color.New(color.FgGreen).SprintFunc()
			core.SafePrintf("%s\n", green(fmt.Sprintf("✅ 批次 %d/%d 完成", batch.BatchNum, batch.TotalBatches)))
			time.Sleep(300 * time.Millisecond)
			if !core.DisableDynamicUI {
				ui.Resume()
			}
		}
	} // 批次循环结束

	logger.Info(strings.Repeat("-", 45))

	// 只有在下载真正成功后才转移缓存文件
	if usingCache {
		cacheHashDir := baseSaveFolder // 缓存的hash子目录，如: Cache/07b01b1d847fa876

		// 统计需要转移的文件
		actualMusicFiles := 0
		filepath.Walk(cacheHashDir, func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return nil
			}
			if !info.IsDir() && (strings.HasSuffix(path, ".m4a") || strings.HasSuffix(path, ".mp3") || strings.HasSuffix(path, ".mp4")) {
				actualMusicFiles++
			}
			return nil
		})

		// 扫描所有需要转移的文件
		hasFilesToMove := false
		filepath.Walk(cacheHashDir, func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return nil
			}
			if !info.IsDir() && (strings.HasSuffix(path, ".m4a") || strings.HasSuffix(path, ".mp4") || strings.HasSuffix(path, ".jpg")) {
				hasFilesToMove = true
				return filepath.SkipDir
			}
			return nil
		})

		if hasFilesToMove {
			// 有文件需要转移
			cyan := color.New(color.FgCyan).SprintFunc()
			if actualMusicFiles > 0 {
				logger.Info("%s", cyan(fmt.Sprintf("📤 转移 %d 个文件...", actualMusicFiles)))
			} else {
				logger.Info("%s", cyan("📤 转移文件..."))
			}

			// 递归转移所有子目录
			movedCount := 0
			skippedCount := 0
			moveErr := filepath.Walk(cacheHashDir, func(cachePath string, info os.FileInfo, walkErr error) error {
				if walkErr != nil {
					return nil
				}

				// 跳过根目录本身
				if cachePath == cacheHashDir {
					return nil
				}

				// 计算相对路径
				relPath, err := filepath.Rel(cacheHashDir, cachePath)
				if err != nil {
					return nil
				}

				// 构建目标路径
				targetPath := filepath.Join(finalSaveFolder, relPath)

				if info.IsDir() {
					// 创建目标目录
					return os.MkdirAll(targetPath, info.Mode())
				}

				// 转移文件（SafeMoveFile 内部已检查目标文件存在性）
				if err := utils.SafeMoveFile(cachePath, targetPath); err != nil {
					if strings.Contains(err.Error(), "目标文件已存在") {
						skippedCount++
						// 静默跳过，不打印警告
					} else {
						logger.Warn("警告: 转移文件失败 %s: %v", relPath, err)
					}
				} else {
					movedCount++
				}
				return nil
			})

			if moveErr != nil {
				logger.Warn("警告: 转移文件过程出现错误: %v", moveErr)
			}

			// 显示转移结果（只有实际转移了文件才显示）
			if movedCount > 0 {
				if skippedCount > 0 {
					msg := fmt.Sprintf("✅ 转移完成（新增 %d，跳过 %d）", movedCount, skippedCount)
					logger.Info("%s", color.New(color.FgGreen).SprintFunc()(msg))
				} else {
					msg := fmt.Sprintf("✅ 转移完成（%d 个）", movedCount)
					logger.Info("%s", color.New(color.FgGreen).SprintFunc()(msg))
				}
			}
		}

		// 清理缓存hash目录（无论成功失败都清理）
		if err := utils.CleanupCacheDirectory(cacheHashDir); err != nil {
			logger.Warn("清理缓存目录警告: %v", err)
		}

		// 设置下载成功标志
		downloadSuccess = true
	} else {
		// 没有使用缓存，设置成功标志
		downloadSuccess = true
	}

	// 清理只包含封面图片的空文件夹（由于音质标签不一致产生的冗余文件夹）
	cleanedCount := cleanupEmptyAlbumFolders(finalSaveFolder)
	if cleanedCount > 0 {
		cyan := color.New(color.FgCyan).SprintFunc()
		logger.Info("%s", cyan(fmt.Sprintf("🧹 已清理 %d 个冗余空文件夹", cleanedCount)))
	}

	return nil
}

func MvDownloader(adamID string, baseSaveDir, artistDir, albumDir string, storefront string, meta *structs.AutoGenerated, account *structs.Account) (string, string, error) {
	MVInfo, err := api.GetMVInfoFromAdam(adamID, account, storefront)
	if err != nil {
		return "", "", err
	}

	var trackTotal int
	var trackNum int
	var index int
	if meta != nil {
		trackTotal = len(meta.Data[0].Relationships.Tracks.Data)
		for i, track := range meta.Data[0].Relationships.Tracks.Data {
			if adamID == track.ID {
				index = i
				trackNum = i + 1
			}
		}
	}

	// Extract release year for Emby naming standard
	var releaseYear string
	if len(MVInfo.Data[0].Attributes.ReleaseDate) >= 4 {
		releaseYear = MVInfo.Data[0].Attributes.ReleaseDate[:4]
	}

	// Emby naming standard: {VideoName (Year)}/{VideoName (Year)}.mp4
	// Artist name is already in the parent folder, no need to repeat
	var mvFolderName, mvFileName string
	mvName := core.LimitString(MVInfo.Data[0].Attributes.Name)

	if releaseYear != "" {
		// Format: "VideoName (Year)"
		mvFolderName = fmt.Sprintf("%s (%s)", mvName, releaseYear)
		mvFileName = fmt.Sprintf("%s (%s).mp4", mvName, releaseYear)
	} else {
		// Fallback without year
		mvFolderName = mvName
		mvFileName = fmt.Sprintf("%s.mp4", mvName)
	}

	sanitizedMvFolderName := core.ForbiddenNames.ReplaceAllString(mvFolderName, "_")
	sanitizedMvFileName := core.ForbiddenNames.ReplaceAllString(mvFileName, "_")

	// Use artistDir as sub-folder under MV save folder for organization
	finalArtistDir, finalMvDir, finalFilename := utils.EnsureSafePath(
		baseSaveDir, artistDir, sanitizedMvFolderName, sanitizedMvFileName,
	)

	// Build the final Emby-compatible path structure
	var finalSingerFolder string
	if finalArtistDir != "" {
		finalSingerFolder = filepath.Join(baseSaveDir, finalArtistDir)
	} else {
		finalSingerFolder = baseSaveDir
	}
	finalMvFolder := filepath.Join(finalSingerFolder, finalMvDir)
	mvOutPath := filepath.Join(finalMvFolder, finalFilename)
	if err := os.MkdirAll(finalMvFolder, 0755); err != nil {
		return "", "", fmt.Errorf("创建MV目录失败: %w", err)
	}
	exists, _ := utils.FileExists(mvOutPath)
	if exists {
		return mvOutPath, "已存在", nil
	}

	mvm3u8url, _, err := runv3.GetWebplayback(adamID, core.DeveloperToken, account.MediaUserToken, true)
	if err != nil {
		return "", "", fmt.Errorf("获取MV播放列表失败: %w", err)
	}
	if mvm3u8url == "" {
		return "", "", errors.New("media-user-token may be wrong or expired")
	}

	vidPath := filepath.Join(finalMvFolder, fmt.Sprintf("%s_vid.mp4", adamID))
	audPath := filepath.Join(finalMvFolder, fmt.Sprintf("%s_aud.mp4", adamID))

	videom3u8url, resolution, err := parser.ExtractVideo(mvm3u8url)
	if err != nil {
		return "", "", fmt.Errorf("提取视频流URL失败: %w", err)
	}

	// 显示视频质量信息
	if resolution != "" {
		core.SafePrintf("📺 视频质量: %s\n", resolution)
	}

	// 显示下载开始提示
	core.SafePrintf("🎥 开始下载MV...\n")

	videokeyAndUrls, err := runv3.Run(adamID, videom3u8url, core.DeveloperToken, account.MediaUserToken, true)
	if err != nil {
		return "", "", fmt.Errorf("获取视频密钥和URL失败: %w", err)
	}
	err = runv3.ExtMvDataWithDesc(videokeyAndUrls, vidPath, "  📹 视频流")
	if err != nil {
		return "", "", fmt.Errorf("下载或解密视频数据失败: %w", err)
	}

	audiom3u8url, err := parser.ExtractMvAudio(mvm3u8url)
	if err != nil {
		return "", "", fmt.Errorf("提取音频流URL失败: %w", err)
	}
	audiokeyAndUrls, err := runv3.Run(adamID, audiom3u8url, core.DeveloperToken, account.MediaUserToken, true)
	if err != nil {
		return "", "", fmt.Errorf("获取音频密钥和URL失败: %w", err)
	}
	err = runv3.ExtMvDataWithDesc(audiokeyAndUrls, audPath, "  🔊 音频流")
	if err != nil {
		return "", "", fmt.Errorf("下载或解密视频数据失败: %w", err)
	}

	tags := []string{
		"tool=",
		fmt.Sprintf("artist=%s", MVInfo.Data[0].Attributes.ArtistName),
		fmt.Sprintf("title=%s", MVInfo.Data[0].Attributes.Name),
		fmt.Sprintf("genre=%s", MVInfo.Data[0].Attributes.GenreNames[0]),
		fmt.Sprintf("created=%s", MVInfo.Data[0].Attributes.ReleaseDate),
		fmt.Sprintf("ISRC=%s", MVInfo.Data[0].Attributes.Isrc),
	}

	if MVInfo.Data[0].Attributes.ContentRating == "explicit" {
		tags = append(tags, "rating=1")
	} else if MVInfo.Data[0].Attributes.ContentRating == "clean" {
		tags = append(tags, "rating=2")
	} else {
		tags = append(tags, "rating=0")
	}

	if meta != nil {
		if meta.Data[0].Type == "playlists" && !core.Config.UseSongInfoForPlaylist {
			tags = append(tags, "disk=1/1", fmt.Sprintf("album=%s", meta.Data[0].Attributes.Name), fmt.Sprintf("track=%d", trackNum), fmt.Sprintf("tracknum=%d/%d", trackNum, trackTotal), fmt.Sprintf("album_artist=%s", meta.Data[0].Attributes.ArtistName), fmt.Sprintf("performer=%s", meta.Data[0].Relationships.Tracks.Data[index].Attributes.ArtistName), fmt.Sprintf("copyright=%s", meta.Data[0].Attributes.Copyright), fmt.Sprintf("UPC=%s", meta.Data[0].Attributes.Upc))
		} else {
			tags = append(tags, fmt.Sprintf("album=%s", meta.Data[0].Relationships.Tracks.Data[index].Attributes.AlbumName), fmt.Sprintf("disk=%d/%d", meta.Data[0].Relationships.Tracks.Data[index].Attributes.DiscNumber, meta.Data[0].Relationships.Tracks.Data[trackTotal-1].Attributes.DiscNumber), fmt.Sprintf("track=%d", meta.Data[0].Relationships.Tracks.Data[index].Attributes.TrackNumber), fmt.Sprintf("tracknum=%d/%d", meta.Data[0].Relationships.Tracks.Data[index].Attributes.TrackNumber, meta.Data[0].Attributes.TrackCount), fmt.Sprintf("album_artist=%s", meta.Data[0].Attributes.ArtistName), fmt.Sprintf("performer=%s", meta.Data[0].Relationships.Tracks.Data[index].Attributes.ArtistName), fmt.Sprintf("copyright=%s", meta.Data[0].Attributes.Copyright), fmt.Sprintf("UPC=%s", meta.Data[0].Attributes.Upc))
		}
	} else {
		tags = append(tags, fmt.Sprintf("album=%s", MVInfo.Data[0].Attributes.AlbumName), fmt.Sprintf("disk=%d", MVInfo.Data[0].Attributes.DiscNumber), fmt.Sprintf("track=%d", MVInfo.Data[0].Attributes.TrackNumber), fmt.Sprintf("tracknum=%d", MVInfo.Data[0].Attributes.TrackNumber), fmt.Sprintf("performer=%s", MVInfo.Data[0].Attributes.ArtistName))
	}

	var covPath string
	if true {
		thumbURL := MVInfo.Data[0].Attributes.Artwork.URL
		baseThumbName := core.ForbiddenNames.ReplaceAllString(mvName, "_") + "_thumbnail"
		covPath, err = metadata.WriteCover(finalMvFolder, baseThumbName, thumbURL)
		if err == nil {
			tags = append(tags, fmt.Sprintf("cover=%s", covPath))
		}
	}

	tagsString := strings.Join(tags, ":")
	muxCmd := exec.Command("MP4Box", "-itags", tagsString, "-quiet", "-add", vidPath, "-add", audPath, "-keep-utc", "-new", mvOutPath)
	if err := muxCmd.Run(); err != nil {
		return "", "", err
	}
	defer os.Remove(vidPath)
	defer os.Remove(audPath)
	if covPath != "" {
		defer os.Remove(covPath)
	}
	return mvOutPath, resolution, nil
}
